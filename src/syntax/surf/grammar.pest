//
// Created by intellij-pest on 2019-04-06
// voile grammar
// Author: ice1000
//

WHITESPACE = _{ WHITE_SPACE | ("//" ~ (!NEWLINE ~ ANY)*) }

// Identifier
ident_char =
 _{ ASCII_ALPHA
  | "\\\\"
  }
ident_raw =
 _{ ident_char
  ~ ( ident_char
    | ASCII_DIGIT
    | "'"
    | "_"
    )*
  }
///Yellow
ident = @{ ident_raw }
///Pink
cons = @{ "@" ~ ident_raw }
///Red
meta = @{ "_" }
///#E0957B
bottom = @{ "!" }
///Pink
one_sum = @{ "'" ~ ident_raw }

// Keywords
val_keyword = _{ "val" }
let_keyword = _{ "let" }
lambda_keyword = _{ "\\" | "\u{03BB}" }
type_level = @{ ASCII_DIGIT* }
///#E0957B
type_keyword = ${ "Type" ~ type_level }
semicolon = _{ ";" }
arrow = _{ "->" }
sum_op = _{ "+" }
sig_op = _{ "*" }
pipe_op = _{ "|>" }
comma_op = _{ "," }
dollar_op = _{ "$" }

// Parameters
multi_param = { ident+ ~ ":" ~ expr }
explicit = { "(" ~ multi_param ~ ")" }
param =
 { explicit
 | dollar_expr // unnamed parameter
 }

// Lambdas
lambda =
 { lambda_keyword
 ~ ident+
 ~ arrow
 ~ expr
 }

expr = { sig_expr }

sig_expr = { (param ~ sig_op)* ~ pi_expr }
pi_expr = { (param ~ arrow)* ~ dollar_expr }
dollar_expr = { comma_expr ~ (dollar_op ~ comma_expr)* }
comma_expr = { pipe_expr ~ (comma_op ~ pipe_expr)* }
pipe_expr = { sum_expr ~ (pipe_op ~ sum_expr)* }
sum_expr = { app_expr ~ (sum_op ~ app_expr)* }
app_expr = { primary_expr+ }
primary_expr =
 { type_keyword
 | cons
 | one_sum
 | bottom
 | meta
 | lambda
 | ident
 | "(" ~ expr ~ ")"
 }

// ML-style type signature and definition
signature =
 { val_keyword
 ~ ident
 ~ ":"
 ~ expr
 ~ semicolon
 }
implementation =
 { let_keyword
 ~ ident
 ~ "="
 ~ expr
 ~ semicolon
 }

declaration =
 { signature
 | implementation
 }

// File
file = { WHITESPACE* ~ declaration* }
